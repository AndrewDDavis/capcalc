#!/usr/bin/env python
#
#   Copyright 2016 Blaise Frederick
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
#       $Author: frederic $
#       $Date: 2016/06/14 12:04:50 $
#       $Id: histnifti,v 1.8 2016/06/14 12:04:50 frederic Exp $
#
from __future__ import print_function
import sys
import getopt
import string
import rapidtide.tide_funcs as tide
from sklearn.cluster import KMeans, MiniBatchKMeans

from numpy import r_, zeros, ones, shape, where, sort
from pylab import *

def usage():
    print('usage: mapkmeanstoimg inputfile outputroot [-m] [-n NUMCLUSTER]')
    print('')
    print('required arguments:')
    print('    inputfile        - the name of the file with the kmeans cluster centers')
    print('    templatefile     - the name of the template region file')
    print('    outputfile       - the name of the output nifti file')
    print('')
    return()


# get the command line parameters
if len(sys.argv) < 4:
    usage()
    exit()

# handle required args first
inputfilename=sys.argv[1]
templatefile=sys.argv[2]
outputfile=sys.argv[3]

print('loading data')
theclustercenters = tide.readvecs(inputfilename)
template_img, template_data, template_hdr, thedims, thesizes = tide.readfromnifti(templatefile)
    
print(theclustercenters.shape)
numregions = theclustercenters.shape[0]
numclusters = theclustercenters.shape[1]
xsize=thedims[1]
ysize=thedims[2]
numslices=thedims[3]
numvoxels = xsize * ysize * numslices
output_data = zeros((numvoxels, numregions), dtype='float')
templatevoxels = reshape(template_data, (numvoxels)).asint()

for cluster in range(numclusters):
    for i in range(1, numregions + 1):
        output_data[where(templatevoxels == i), cluster] = theclustercenters[thecluster, i - 1]
    
theheader=template_hdr
theheader['dim'][4] = numclusters
tide.savetonifti(output_data.reshape((xsize, ysize, numslices, numclusters)), theheader, thesizes, outputfile)
